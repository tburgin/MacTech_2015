<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Auth</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>CodeBlock</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>    // Create an instance of the PromptWindowController
    PromptWindowController *promptWindowController = [[PromptWindowController alloc] init];
    [promptWindowController setMechanism:_mechanism];
    
    // If the PIN we received from the inter-mechanism context data is not nil, set the
    // @property pin of the promptWindowController instance.
    if (pin) {
        NSLog(@"VerifyAuth:MechanismInvoke:PromptWindowController [+] setPin");
        [promptWindowController setPin:pin];
    }
    
    // Display the PIN Prompt Window. Running as Modal will block the main thread. This will allow
    // the user to input a PIN before we decide to allow or deny the login. The login will either be
    // denied within the promptWindowController instance or we will return from the run method of
    // the verify class. The default "allow login" will be handled back in the
    // AuthorizationPlugin class . If the pin is nil, we still want to display to window. Hitting
    // enter will allow the login.
    [NSApp runModalForWindow:[promptWindowController window]];</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A38802E5-DC2D-4316-9C8F-A032AAE04089</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>Verify.m Display Prompt Window</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
